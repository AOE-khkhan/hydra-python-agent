import redis
from redisgraph import Graph, Node
import urllib.request
import json
from hydrus.hydraspec import doc_maker
import hydrus
from graphviz import Digraph
from classes_objects import ClassEndpoints
from collections_endpoint import CollectionEndpoints


def final_file(url):
    """ Open the given url and read and load the Json data."""
    response = urllib.request.urlopen(url)
    return json.loads(response.read().decode('utf-8'))


def get_apistructure(entrypoint_node, api_doc):
    """ It breaks the endpoint into two parts collection and classes"""
    global collection_endpoints
    collection_endpoints = {}
    global class_endpoints
    class_endpoints = {}
    collection = 0
    classes = 0
    print("split entrypoint into 2 types of endpoints collection and classes")
    for support_property in api_doc.entrypoint.entrypoint.supportedProperty:
        if isinstance(
                support_property,
                hydrus.hydraspec.doc_writer.EntryPointClass):
            class_endpoints[support_property.name] = support_property.id_
            collection = 1
        if isinstance(
                support_property,
                hydrus.hydraspec.doc_writer.EntryPointCollection):
            collection_endpoints[support_property.name] = support_property.id_
            classes = 1

#    print("class_endpoints", class_endpoints)
#    print("collection_endpoints", collection_endpoints)
    if classes == 1:
        clas = ClassEndpoints(redis_graph, class_endpoints)
        clas.endpointclasses(entrypoint_node, api_doc, url)

    if collection == 1:
        coll = CollectionEndpoints(redis_graph, class_endpoints)
        coll.endpointCollection(
            collection_endpoints,
            entrypoint_node,
            api_doc,
            url)


def get_endpoints(api_doc):
    """Create node for entrypoint"""
    print("creating entrypoint node")
    entrypoint_properties = {}
    entrypoint_properties["@id"] = str("vocab:Entrypoint")
    entrypoint_properties["url"] = str(
        api_doc.entrypoint.url) + str(api_doc.entrypoint.api)
    entrypoint_properties["supportedOperation"] = "GET"
    entrypoint_node = Node(
        label="id",
        alias="Entrypoint",
        properties=entrypoint_properties)
    redis_graph.add_node(entrypoint_node)
    return get_apistructure(entrypoint_node, api_doc)

def main(new_url,api_doc):
    redis_con = redis.Redis(host='localhost', port=6379)
    global redis_graph
    global url
    url=new_url
    redis_graph = Graph("apidoc", redis_con)
    # you also can use https://storage.googleapis.com/api2/api as url
    print("loading... of graph")
    get_endpoints(api_doc)
    print("commiting")
    redis_graph.commit()
    # creating whole the graph in redis
    print("done!!!!")
    # uncomment below 2 lines for getting nodes for whole graph
#    for node in redis_graph.nodes.values():
#        print("\n",node.alias)
    # uncomment the below lines for show the graph stored in redis
#    g = Digraph('redis_graph', filename='hydra_graph.gv')
#    # using graphviz for visualization of graph stored in redis
#    for edge in redis_graph.edges:
#        g.edge(edge.src_node.alias, edge.dest_node.alias)
#    g.view()
#    #see the graph generated by graphviz

if __name__ == "__main__":
    url = "http://35.224.198.158:8080/api"
    apidoc = final_file(url + "/vocab")
    api_doc = doc_maker.create_doc(apidoc)
    main(url,api_doc)
